// ***************************************************************************
// *  Copyright 2012 Joseph Molnar
// *
// *  Licensed under the Apache License, Version 2.0 (the "License");
// *  you may not use this file except in compliance with the License.
// *  You may obtain a copy of the License at
// *
// *      http://www.apache.org/licenses/LICENSE-2.0
// *
// *  Unless required by applicable law or agreed to in writing, software
// *  distributed under the License is distributed on an "AS IS" BASIS,
// *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// *  See the License for the specific language governing permissions and
// *  limitations under the License.
// ***************************************************************************
package com.tales.contracts.services.http;

import javax.servlet.http.Cookie;

import com.google.common.base.Preconditions;
import com.google.common.base.Strings;
import com.tales.contracts.data.DataContract;
import com.tales.system.Conditions;
import com.tales.system.Status;

/**
 * The result coming out of a resource method call.
 * @author jmolnar
 *
 * @param <T> the type of value generated by the resource method 
 */
@DataContract(name="lower")
public class ResourceResult<T> extends HttpResult<T> {
	/**
	 * Default, empty, constructor.
	 */
	public ResourceResult( ) {
	}
	
	/**
	 * Adds a header to return.
	 * If a header with the same name already exists 
	 * it will be replaced.
	 * @param theName the name of the header
	 * @param theValue the value to give the header
	 */
	public void addHeader( String theName, String theValue ) {
		Conditions.checkParameter( !Strings.isNullOrEmpty( theName ), "need a name to add a header" );
		headers.put( theName, theValue );
	}
	
	/**
	 * Adds a cookie to the return.
	 * If a cookie with the same name already exists
	 * it will be replaced.
	 * @param theCookie the cookie to be added
	 */
	public void addCookie( Cookie theCookie ) {
		Conditions.checkParameter( theCookie != null, "need a cookie to add a cookie" );
		cookies.put( theCookie.getName(), theCookie );
	}
	
	/**
	 * Sets the value and HTTP status.
	 * @param theStatus the status value to use.
	 */
	public void setResult( T theValue, Status theStatusCode ) {
		Preconditions.checkNotNull( theStatusCode, "need a status code" );
		this.code = theStatusCode;
		this.value = theValue;
		this.subcode = null;
		this.message = null;
		this.exception = null;
	}
	
	/**
	 * Sets the value, HTTP status, along with a lot of status information.
	 * @param theStatusCode the reason for the failure
	 * @param theStatusSubcode a code, handler specific, outlining the problem
	 * @param theMessage the failure message to display
	 * @param theException the exception, which may be null
	 */
	public void setResult( T theValue, Status theStatusCode, String theStatusSubcode, String theMessage ) {
		Preconditions.checkNotNull( theStatusCode, "need a status code" );
		this.value = theValue;
		this.code = theStatusCode;
		this.subcode = theStatusSubcode;
		this.message = theMessage;
		this.exception = null;
	}
	
	/**
	 * Sets the value, HTTP status, along with a lot of status information.
	 * @param theStatusCode the reason for the failure
	 * @param theStatusSubcode a code, handler specific, outlining the problem
	 * @param theMessage the failure message to display
	 * @param theException the exception, which may be null
	 */
	public void setResult( T theValue, Status theStatusCode, String theStatusSubcode, String theMessage, Throwable theException ) {
		Preconditions.checkNotNull( theStatusCode, "need a status code" );
		this.value = theValue;
		this.code = theStatusCode;
		this.subcode = theStatusSubcode;
		this.message = theMessage;
		this.exception = theException;
	}

	/**
	 * Sets the HTTP status, along with a lot of status information.
	 * @param theStatusCode the reason for the failure
	 * @param theStatusSubcode a code, handler specific, outlining the problem
	 * @param theMessage the failure message to display
	 */
	public void setResult( Status theStatusCode ) {
		Preconditions.checkNotNull( theStatusCode, "need a status code" );
		this.code = theStatusCode;
		this.subcode = null;
		this.message = null;
		this.exception = null;
	}
	
	/**
	 * Sets the HTTP status, along with a lot of status information.
	 * @param theStatusCode the reason for the failure
	 * @param theStatusSubcode a code, handler specific, outlining the problem
	 * @param theMessage the failure message to display
	 */
	public void setResult( Status theStatusCode, String theStatusSubcode, String theMessage ) {
		Preconditions.checkNotNull( theStatusCode, "need a status code" );
		this.code = theStatusCode;
		this.subcode = theStatusSubcode;
		this.message = theMessage;
		this.exception = null;
	}
	
	/**
	 * Sets the HTTP status, along with a lot of status information.
	 * @param theStatusCode the reason for the failure
	 * @param theStatusSubcode a code, handler specific, outlining the problem
	 * @param theMessage the failure message to display
	 * @param theException the exception, which may be null
	 */
	public void setResult( Status theStatusCode, String theStatusSubcode, String theMessage, Throwable theException ) {
		Preconditions.checkNotNull( theStatusCode, "need a status code" );
		this.code = theStatusCode;
		this.subcode = theStatusSubcode;
		this.message = theMessage;
		this.exception = theException;
	}
}
