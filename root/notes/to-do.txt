Multi-type contracts
------------------------------------------------
- support the multi-type options for parameters and returns from operations
  - need to have the key, value parameters for types
  - the response object would need to be aware of the ResourceResult type to verify the type of result class works and can be cast to properly

- need to support simple type translator support where there are names that need to be used as references in the multi-type objects and in the contract

- profile: http://yourkit.com/home/index.jsp

- consider adding some form of access-origin header support for resource servlet's automatically in case called by javascript
  - see: http://www.w3.org/TR/cors/
  - see: http://stackoverflow.com/questions/1653308/access-control-allow-origin-multiple-origin-domains/12414239#12414239 


CORS Support
------------------------------------------------
- Ease the allow side by marking the resource as CORS aware
- Verify the origin against a set of configurable origins
- Make it so that if there is any form of error of any kind and there is an Origin header that it is sets the allows header
- Don't set the allows header if there is no origin header
- look here: http://stackoverflow.com/questions/1653308/access-control-allow-origin-multiple-origin-domains

Cookie Support
------------------------------------------------
- Make cookies part of the ResourceResult

General Website handling
------------------------------------------------
- Allow custom error handling pages
  - servlet context's have error handlers (sent in the constructor) that can be set that could potentially handle this, could 
    support a way to register a location to cover
- Allow binding websites (which could mean removing the WebsiteInterface)
- Support a way for facades to report more than one failure in parameters and report them all ack
  maybe can use lambdas to do this but the exception should occur once

Signing Support
------------------------------------------------
- fix or remove what is there

Services
------------------------------------------------
- Change the 'stop'/'kill'/'suspend'/'resume' control commands to take time periods, which will wait prior to executing (send a 202 back?)

Async Support
------------------------------------------------
- Look at properly async handling and funneling

Serialization
------------------------------------------------
- updated JsonTranslationFacility to handle generics better so technically you could ask for a List<a> different than a List<b> 
  though would need to watch the generic of generic scenario
  
Generics
------------------------------------------------
- Right now the contract cannot have a generic whose type parameter is also a generic because Java doesnt' have the type 
  information at the Type level on the field BUT it does seem to have it at the type level of the declaring class
  and therefore, if the types align, could potentially be used (stored on the type itself, or passed in to figure it out) 
  it could also be that the type information is hidden in the superclass according to 
  (http://www.artima.com/weblogs/viewpost.jsp?thread=208860) .. though I may need to be reading it more closely
- don't support resources that are defined using generics ... the method parameters and return will
  be based on the class definition, and I don't have any of that (may want to be explicit)
- currently not trying to solve when the field in question has multiple type parameters in part because I'm not sure 
  of a way to create a ParameterizedType that can return all the types needed (may have to look at the article since
  it implied it isn't possible)
- currently not trying to sovle when the field in question is a generic array, but this may be fairly simple (may be able
  loop on itself) 
  

Contracts
------------------------------------------------
- We may want cookies and headers to be part of the matching spec for which method to run
- cannot return the shape differently for parameters, but instead probably need a way to manage exception handling shape and place into the status response
- support polymorphic parameters and return
- Currently bad parameters send back just a parameter name in the result body, more detail would be good and 
- A way to send back the set of parameters that are not working
- Increase HTTP verb supporting, in particular OPTIONS, which may be needed for CORS support
- Consider making it so parameters can get validation annotations I want to think about where it should live
- add support for mention headers/cookies in the method contract
  this will be used both to ensure they are set when sending out
  but also for automatic generation of the clients
- change the contract to take an array of HttpVerbs instead of being part of the regex 

Status
------------------------------------------------
- track status by version of Resource


Config
------------------------------------------------
- support listening to changes in config
- json-based config, for supporting sensitive params
- network based config
- map source config should copy the input to be save (in case something underlying changes them)
- change the list format to mirror map (e.g. [] instead of ,)

Client
------------------------------------------------
- support a helper that can convert from service status responses to local exceptions
- make the client support async calls
- update the logging comments to match the server  side (indicating sync/async)
- add status blocks
- move the Conditions items out from common and into service since it really is meant for the 
  facade handling of errors and automatic responses
- status was moved to common (com.tales.system), probably need a better spot (items needed for service work that is shared) 
- support header overrides
- consider mutual SSL support, which means adding keystore support into the ssl context factory
- add helper to get generic information for return types
- ability to set the Root-Request-Id, Parent-Request-Id headers
- consider way to set override.response.details, override.response.readability parameters
- need better support for headers and cookies in the clients (no cookie support at all right now)
- need a helper for dealing with responses from services, time-outs/retries, etc
- need support for more cache-control abilities like fields on private/no-store or custom extensions

Misc
------------------------------------------------
- update Conditions/parameter checking to take into account things like null, out of range, expression, etc. so it can be reported back
- change to not use DateTime but epoch time (for the pieces we care about)
- make it so the logging level can change per request through an override
- the AuthenticationException handling in ResourceFacility needs to encode/strip non-RFC 2616 quoted-string compliant characters
- guarantee the order of Json field member output (JsonTypeMap) and DataContract member output, which would require a list
  to be used along-side the map ... this allows items which may sign data re-interpret and send out again to be in the same
  order insted of whatever the maps do

- see if there is an easy way to take the output from a client and send back from a resource call, this allows for proxy calls
  

Helpers
------------------------------------------------
- if transport versus storage business objects are needed it would be nice to have a way to translate between them
  quickly/easily ... a helper could be used (match like for like names) and helpers for transforms
  
  OR
  
  maybe there is something for the transport layer that does the transformation ... an object isn't necessarily 
  needed, but instead, description of what is needed/used

Update Admin to use Resource Contracts
------------------------------------------------
Examples:
/status/service
/status/service/values
/status/service/values/{name}
/status/interfaces/{name}
/status/interfaces/{name}/values
/status/interfaces/{name}/values/{name}
/status/interfaces/{name}/contracts/{name}
/status/interfaces/{name}/contracts/{name}/values/{name}
/status/interfaces/{name}/contracts/{name}/version/{version}
/status/interfaces/{name}/contracts/{name}/version/{version}/values
/status/interfaces/{name}/contracts/{name}/version/{version}/values/{name}
/status/interfaces/{name}/contracts/{name}/version/{version}/subcontracts/{name}/values/{name}
/status/interfaces/{name}/contracts/{name}/version/{version}/values/{name}
 